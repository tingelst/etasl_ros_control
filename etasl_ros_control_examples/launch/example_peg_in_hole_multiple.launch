<?xml version="1.0" encoding="utf-8"?>
<launch>
    <arg name="sim" default="true"/>
    
    <include file="$(find kuka_lab_setup)/launch/load_kukalabsetup.launch"/>

    <rosparam file="$(find kuka_rsi_hw_interface)/config/controller_joint_names.yaml" command="load"/>
    <rosparam file="$(find kuka_rsi_hw_interface)/test/test_params_sim.yaml" command="load" if="$(arg sim)"/>
    <rosparam file="$(find kuka_rsi_hw_interface)/test/test_params.yaml" command="load" unless="$(arg sim)"/>
    <node name="kuka_hardware_interface" pkg="kuka_rsi_hw_interface" type="kuka_hardware_interface_node" respawn="false" output="screen" required="true"/>

    <rosparam file="$(find etasl_ros_control_examples)/config/hardware_controllers_peg_in_hole_multiple.yaml" command="load" subst_value="true"/>
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="etasl_controller joint_state_controller"/>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

    <node name='kuka_rsi_simulator' pkg='kuka_rsi_simulator' type="kuka_rsi_simulator" args="127.0.0.1 49152" if="$(arg sim)"/>

    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find kuka_lab_setup)/config/zero_state_robotiq.rviz" required="true"/>

    <node name="target_publisher" pkg="etasl_ros_control_examples" type="lissajous_publisher.py" required="true"/>
    <node name="zivid_publisher" pkg="etasl_ros_control_examples" type="zivid_publisher.py" required="true"/>
    <node name="smach_viz" pkg="smach_viewer" type="smach_viewer.py"/>
    <node name="smach_peg_in_hole" pkg="etasl_ros_control_examples" type="smach_peg_in_hole.py" required="true"/>
    
</launch>